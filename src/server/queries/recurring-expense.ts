import { db } from "../db/";
import { recurringExpense } from "../db/schema/recurring-expense";
import type { RecurringExpenseInsert } from "../db/schema/recurring-expense";

import { recurringExpenseOccurrence } from "../db/schema/recurring-expense-occurrence";
import type { RecurringExpenseOccurrenceInsert } from "../db/schema/recurring-expense-occurrence";

/**
 * Create recurring expense and generate occurrences for each period from startDate to (endDate or today+12 months).
 */
export async function createRecurringExpense(data: RecurringExpenseInsert) {
  try {
    const [recExp] = await db
      .insert(recurringExpense)
      .values({
        description: data.description,
        value: data.value,
        recurrenceType: data.recurrenceType,
        startDate: data.startDate,
        endDate: data.endDate ?? null,
        isActive: true,
      })
      .returning();

    if (!recExp?.id) {
      throw new Error("Recurring expense not created");
    }

    // Occurrences are now generated by a scheduled cron job on the due date.
    return recExp;
  } catch (error) {
    console.error("Error in createRecurringExpense:", error);
    throw error;
  }
}

/**
 * Generate occurrences for a recurring expense (monthly, weekly, yearly).
 * Only for the period between startDate and endDate (or up to 12 months ahead if indefinite).
 */
function generateOccurrences({
  recurringExpenseId,
  value,
  startDate,
  endDate,
  recurrenceType,
}: {
  recurringExpenseId: number;
  value: string;
  startDate: string;
  endDate?: string | null;
  recurrenceType: string;
}): RecurringExpenseOccurrenceInsert[] {
  const occurrences: RecurringExpenseOccurrenceInsert[] = [];
  const current = new Date(startDate);
  const today = new Date();
  const last = endDate
    ? new Date(endDate)
    : new Date(today.getFullYear(), today.getMonth() + 12, today.getDate());
  while (current <= last) {
    occurrences.push({
      recurringExpenseId,
      dueDate: current.toISOString().slice(0, 10),
      value,
      isPaid: false,
    });
    if (recurrenceType === "monthly") {
      current.setMonth(current.getMonth() + 1);
    } else if (recurrenceType === "weekly") {
      current.setDate(current.getDate() + 7);
    } else if (recurrenceType === "yearly") {
      current.setFullYear(current.getFullYear() + 1);
    } else {
      break;
    }
  }
  return occurrences;
}
