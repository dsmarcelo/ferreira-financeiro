---
description: forms
globs:
alwaysApply: false
---

# Forms

- Use zod and server actions when creating forms
- Add the error/message field on the bottom of each input
- Follow the example:

```tsx
'use server'

import { z } from 'zod'

const addressSchema = z.object({
  streetAddress: z.string().min(1, 'Street address is required')
})

ActionResponse = {
  errors?: Record<string, string[]>;
  message?: string;
  success?: boolean;
};

export async function submitAddress(prevState: ActionResponse | null, formData: FormData): Promise<ActionResponse> {
  try {
    const rawData: AddressFormData = {
      streetAddress: formData.get('streetAddress') as string
    }

    // Validate the form data
    const validatedData = addressSchema.safeParse(rawData)

    if (!validatedData.success) {
      return {
        success: false,
        message: 'Please fix the errors in the form',
        errors: validatedData.error.flatten().fieldErrors,
      }
    }

    // Here you would typically save the address the database
    revalidatePath(/"path")

    return {
      success: true,
      message: 'Address saved successfully!',
    }
  } catch (error) {
    return {
      success: false,
      message: 'An unexpected error occurred',
    }
  }
}
```

Then, you can pass your action to the useActionState hook and use the returned state to display an error message.

Form component:

```tsx
"use client";

import { useActionState } from "react";
import { createUser } from "@/app/actions";

const initialState = {
  message: "",
};

export function Signup() {
  const [state, formAction, pending] = useActionState(createUser, initialState);

  return (
    <form action={formAction}>
      <label htmlFor="email">Email</label>
      <input type="text" id="email" name="email" required />
      {/* ... */}
      <p aria-live="polite">{state?.message}</p>
      <button disabled={pending}>Sign up</button>
    </form>
  );
}
```
